{"version":3,"sources":["../scripts.babel/background.js"],"names":[],"mappings":"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","file":"background.js","sourcesContent":["'use strict';\n\n// Tabs service\nvar tabs = {\n\n    // Snoozed tabs\n    snooze: {\n\n        // Necessities\n        current: null,\n\n        // Initialize\n        init: function(){\n\n            // Set up a loop to get snoozed tabs\n            window.setInterval(tabs.snooze.get, 7500);\n\n            // Create the listener for the evitable sounding alarms\n            chrome.alarms.onAlarm.addListener(function(alarm){\n\n                // Loop through the current snoozed tabs to find the one that matches the alarm name\n                angular.forEach(tabs.snooze.current, function(snooze){\n                    if(alarm.name === snooze.alarmName){\n                        tabs.snooze.open(alarm, snooze);\n                    }\n                });\n\n            });\n\n        },\n\n        // Get snoozed tabs\n        get: function(){\n\n            // Get the currently snoozed tabs from chrome storage\n            chrome.storage.sync.get('tmSnoozeCurrentTabs', function(data){\n                if(data.tmSnoozeCurrentTabs.length > 0){\n\n                    // Set current snoozed tabs\n                    tabs.snooze.current = angular.copy(data.tmSnoozeCurrentTabs);\n\n                    // Set the badge text (just in case)\n                    chrome.browserAction.setBadgeText({ text: tabs.snooze.current.length.toString() });\n\n                    // Create the alarms for the snoozed tabs\n                    tabs.snooze.alarms.create();\n\n                }\n                else{\n\n                    // Set current snoozed tabs\n                    tabs.snooze.current = null;\n\n                    // Set extension badge text to nothing\n                    chrome.browserAction.setBadgeText({ text: '' });\n\n                    // Clear all alarms\n                    chrome.alarms.clearAll();\n\n                }\n            });\n\n        },\n\n        // Open snoozed tab and show notification\n        open: function(alarm, snooze){\n\n            // Show notification of alarm\n            tabs.snooze.notifications.show(alarm, snooze);\n\n            // Open tab by creating new tab with its information\n            chrome.tabs.create({ url: snooze.tab.url });\n\n            // Clean up\n            tabs.snooze.cleanUp(alarm, snooze);\n\n        },\n\n        // Clean up after opening snoozed tab\n        cleanUp: function(alarm, snooze){\n\n            // Clear the alarm\n            chrome.alarms.clear(alarm.name);\n\n            // If NOT a periodically snoozed tab\n            if('periodically' !== snooze.type){\n\n                // Remove the tab from the current list\n                tabs.snooze.current.splice(tabs.snooze.current.indexOf(snooze), 1);\n\n            }\n            // If a periodically snoozed tab, reset the nextSnoozedToDate\n            else{\n\n                // If periodicallySetting.type is DAILY\n                if('daily' === snooze.periodicallySetting.type){\n\n                    // Add one day to the nextSnoozedToDate\n                    snooze.nextSnoozedToDate = moment(snooze.nextSnoozedToDate).add(1, 'days').format();\n\n                }\n                // If periodicallySetting.type is WEEKLY\n                else if('weekly' === snooze.periodicallySetting.type){\n\n                    // Necessities\n                    var startingDate, futureDate = null;\n                    var currentNextSnoozedToDate = moment(snooze.nextSnoozedToDate);\n\n                    // Loop through the daysOfWeek\n                    angular.forEach(snooze.periodicallySetting.daysOfWeek, function(dayIndex){\n\n                        // Set startingDate\n                        startingDate = moment(snooze.nextSnoozedToDate).day(dayIndex);\n\n                        // If current date is AFTER the date with that option selected, add 1 week to that date\n                        if(moment().diff(startingDate) > 0 && !futureDate){\n                            futureDate = startingDate.add(1, 'weeks');\n                        }\n                        // If current date is BEFORE the date with that option selected, then set nextSnoozedToDate\n                        else if(moment().diff(startingDate) < 0){\n                            snooze.nextSnoozedToDate = startingDate.format();\n                        }\n\n                    });\n\n                    // If nextSnoozedToDate has not been set\n                    if(currentNextSnoozedToDate.isSame(moment(snooze.nextSnoozedToDate))){\n                        snooze.nextSnoozedToDate = futureDate.format();\n                    }\n\n                }\n                // If periodicallySetting.type is MONTHLY\n                else if('monthly' === snooze.periodicallySetting.type){\n\n                    // Add one month to the nextSnoozedToDate\n                    snooze.nextSnoozedToDate = moment(snooze.nextSnoozedToDate).add(1, 'months').format();\n\n                }\n                // If periodicallySetting.type is YEARLY\n                else if('yearly' === snooze.periodicallySetting.type){\n\n                    // Add one year to the nextSnoozedToDate\n                    snooze.nextSnoozedToDate = moment(snooze.nextSnoozedToDate).add(1, 'years').format();\n\n                }\n\n            }\n\n            // Store the current snoozed tabs list\n            var store = { tmSnoozeCurrentTabs: tabs.snooze.current };\n            chrome.storage.sync.set(store);\n\n            // Set extension badge text to current snoozed tabs length\n            if(tabs.snooze.current.length > 0){\n                chrome.browserAction.setBadgeText({ text: tabs.snooze.current.length.toString() });\n            }\n            else{\n                chrome.browserAction.setBadgeText({ text: '' });\n            }\n\n        },\n\n        // Alarms\n        alarms: {\n\n            // Create\n            create: function(){\n\n                // Necessities\n                var alarmName = null;\n                var alarmParams = {};\n\n                // Loop through each snoozed tab\n                angular.forEach(tabs.snooze.current, function(snooze, index){\n\n                    // Set name\n                    alarmName = snooze.type + index.toString() + 'Alarm';\n                    snooze.alarmName = alarmName;\n\n                    // Set when param\n                    alarmParams.when = moment(snooze.nextSnoozedToDate).valueOf();\n\n                    // Create the alarm for opening the snoozed tab\n                    chrome.alarms.create(alarmName, alarmParams);\n\n                });\n\n            }\n\n        },\n\n        // Notifications\n        notifications: {\n\n            // Show notification of snoozed tab\n            show: function(alarm, snooze){\n\n                // Necessities\n                var notifName = null;\n                var notifOptions = {};\n\n                // Set necessities\n                notifName = alarm.name + 'Notif';\n                notifOptions = {\n                    type: 'basic',\n                    priority: 1,\n                    title: 'TabMagic',\n                    message: snooze.tab.title,\n                    contextMessage: 'has been reopened from snooze',\n                    iconUrl: chrome.extension.getURL('images/icon-128.png')\n                };\n\n                // Create alarm\n                chrome.notifications.create(notifName, notifOptions);\n\n            }\n\n        }\n\n    }\n\n};\n\n// Initializes the extension\nfunction init(){\n\n    // Provide extension details to console\n    chrome.runtime.onInstalled.addListener(details => {\n        console.log('TabMagic version', details.previousVersion, 'loaded on', moment().format('dddd, MMMM Do YYYY, h:mm:ss a'));\n    });\n\n    // Initialize tabs snooze\n    tabs.snooze.init();\n\n}\n\n// Initialize the extension\ninit();\n"]}